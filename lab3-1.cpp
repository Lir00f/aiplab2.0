#include <iostream>
using namespace std;

void Task1()
{
	int ival = 1024, ival2 = 2048;
	int *pi1 = &ival, *pi2 = &ival2, **pi3=0;
    // Что происходит при выполнении следующих операций присваивания? Допущены ли здесь ошибки?
	ival = *pi3; //(а) - логическая ошибка пытаемся в переменную типа int (целое число) присвоить значение по указателю int** - т.е. int*. Получается int = int* - так нельзя.
	*pi2 = *pi3; //(b) - логическая ошибка пытаемся в значение по указателю int* присвоить значение по указателю int** - т.е. в int пытаемся присвоить int*. Получается int = int* - так нельзя.
	ival = pi2;  //(c) - логическая ошибка пытаемся в переменную типа int присвоить указатель int*. Получается int = int* - так нельзя.
	pi2 = *pi1;  //(d) - логическая ошибка пытаемся в переменную типа int* (указатель на целое число) присвоить значение по указателю int* - т.е. int. Получается int* = int - так нельзя.
	pi1 = pi3;	 //(e) - логическая ошибка пытаемся в переменную типа int* (указатель на целое число) присвоить указатель int**. Получается int * = int** - так нельзя.
	ival = *pi1; //(f) - здесь ошибки нет, пытаемся в переменную типа int присвоить значение по указателю int* - т.е. int. Получается int = int - так можно.
	pi1 = ival;  //(g) - логическая ошибка пытаемся в переменную типа int* (указатель на целое число) присвоить int. Получается int* = int - так нельзя.
	pi3 = &pi2;  //(h) - здесь ошибки нет, пытаемся в переменную типа int** присвоить адрес переменно типа int* - т.е. int**. Получается int** = int** - так можно.
}

void Task2()
{
/*

int func(int *pi)
{
	*pi = 1024;
	return *pi;
}

int main() //ошибка в том, что функция возвращает 0 - т.е. целое число. (было void main() - и это означало, что функция ничего не возвращает)
{
	int pi2 = 0; //ошибка в том, что нужно создавать не указатель, а обычный int (было int *pi2 = 0;)
	int ival = func(&pi2); //соответственно в функцию теперь надо передавать адрес переменной, чтобы получился int* (было int ival = func(pi2);)
	return 0;
}
*/

}

int sum(int m[4][4]) //считаем сумму элементов в шахматном порядке начиная с первого
{
	int res = 0; // заводим переменную, в которой будем хранить общую сумму
	int start = 0; // заводим дополнительную переменную, чтобы начинать с первого или второго элемента поочереди
	for (int i = 0; i < 4; i++) //для каждой строки массива (т.е. от 0 до 4)
    {
        for (int j = start; j < 4; j+=2) //идем от start до 4 с шагом в 2 (т.е. через одну клетку)
            res += m[i][j]; //добавляем к результату текущее число
        if (start == 0) //если начинали с первого числа
            start = 1;  //в следующий раз начинаем со второго
        else //иначе
            start = 0; //в следующий раз начинаем с первого
    }
	return res; //возвращаем результат
}

void Task3()
{
	int m[4][4] = {{1,0,2,0}, {0,3,0,4},{5,0,6,0},{0,7,0,8}}; //создаем массив 4х4
	cout << "sum from first position: " << sum(m) << endl; // выводим сумму начиная с первого элемента 
}

int main()
{
    Task3();
	return 0;
}
